import pandas as pd
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np

def read_data(features_path, labels_path):
    # 读取特征和标签
    features = pd.read_csv(r'C:\Users\HP\PycharmProjects\pythonProject\clip_features.csv')
    labels = pd.read_csv(r'C:\Users\HP\PycharmProjects\pythonProject\a. IDRiD_Disease Grading_Training Labels.csv')
    return pd.concat([features.iloc[:, 1:], labels['Retinopathy grade']], axis=1)  # 假设第一列为索引或不相关的数据

if __name__ == '__main__':
    # 加载数据
    data = read_data('path_to_features.csv', 'path_to_labels.csv')  # 确保文件路径正确

    # PCA降维到两维
    pca = PCA(n_components=2)
    principal_components = pca.fit_transform(data.iloc[:, :-1])  # 假设最后一列为标签
    pca_df = pd.DataFrame(data=principal_components, columns=['Principal Component 1', 'Principal Component 2'])
    pca_df['Label'] = data.iloc[:, -1]

    # 应用K-Means聚类
    kmeans = KMeans(n_clusters=5, random_state=42)
    kmeans_labels = kmeans.fit_predict(principal_components)

    # 绘图
    plt.figure(figsize=(10, 6))
    # 调整颜色以匹配你的要求
    colors = ['#1f77b4', '#d62728', '#2ca02c', '#ff7f0e', '#9467bd']  # 蓝色, 红色, 绿色, 黄色, 紫色
    for i in range(5):
        plt.scatter(pca_df.loc[kmeans_labels == i, 'Principal Component 1'],
                    pca_df.loc[kmeans_labels == i, 'Principal Component 2'],
                    color=colors[i], alpha=0.5, label=f'Cluster {i}')

    # 随机样本突出显示
    random_idx = np.random.choice(pca_df.index)
    plt.scatter(pca_df.loc[random_idx, 'Principal Component 1'], pca_df.loc[random_idx, 'Principal Component 2'],
                color='black', edgecolors='white', s=100, label='Random Sample')

    plt.title('K-Means Clustering of CLIP Features using PCA')
    plt.xlabel('Principal Component 1')
    plt.ylabel('Principal Component 2')
    plt.legend()
    plt.show()
